import React, { useState, useEffect } from "react";

// ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ Motivational Quotes
const banglaQuotes = [
  "‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá ‡¶ß‡¶æ‡¶ï‡ßç‡¶ï‡¶æ ‡¶¶‡¶æ‡¶ì, ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßá‡¶â ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§",
  "‡¶ï‡¶†‡ßã‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∂‡ßç‡¶∞‡¶Æ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ö‡¶∞‡ßç‡¶ú‡¶®‡ßá‡¶∞ ‡¶Ü‡¶®‡¶®‡ßç‡¶¶ ‡¶Ü‡¶∞‡¶ì ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶¨‡ßá‡•§",
  "‡¶∏‡¶æ‡¶´‡¶≤‡ßç‡¶Ø ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ü‡¶∏‡ßá ‡¶®‡¶æ, ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶¨‡ßá‡¶∞ ‡¶π‡¶Ø‡¶º‡ßá ‡¶∏‡ßá‡¶ü‡¶ø ‡¶Ö‡¶∞‡ßç‡¶ú‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
  "‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã, ‡¶∏‡¶´‡¶≤‡¶§‡¶æ ‡¶ß‡ßÄ‡¶∞‡ßá ‡¶ß‡ßÄ‡¶∞‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá‡•§",
  "‡¶≠‡¶Ø‡¶º‡¶ï‡ßá ‡¶õ‡¶æ‡¶°‡¶º‡¶æ‡¶ì ‡¶è‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì, ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶ï‡¶∞‡¶¨‡ßá‡•§",
];

const MotivationalSystem = ({ plans }) => {
  const [quote, setQuote] = useState("");
  const [completed, setCompleted] = useState([]);

  // Random ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ quote
  useEffect(() => {
    const randomQuote =
      banglaQuotes[Math.floor(Math.random() * banglaQuotes.length)];
    setQuote(randomQuote);
  }, []);

  // Task complete/undo
  const toggleComplete = (id) => {
    setCompleted((prev) =>
      prev.includes(id) ? prev.filter((c) => c !== id) : [...prev, id]
    );
  };

  const progress = plans && plans.length
    ? Math.round((completed.length / plans.length) * 100)
    : 0;

  return (
    <div className="max-w-3xl mx-auto space-y-6 mt-20">

      {/* Motivational Quote */}
      <div className="bg-indigo-600 text-white p-6 rounded-2xl shadow-lg text-center">
        <h2 className="text-2xl font-bold mb-4">üåü ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø</h2>
        <p className="italic text-lg">{quote}</p>
      </div>

      {/* Progress Tracker */}
      <div className="bg-white p-6 rounded-2xl shadow-lg">
        <h2 className="text-xl font-semibold mb-3">üéØ ‡¶Ö‡¶ó‡ßç‡¶∞‡¶ó‡¶§‡¶ø</h2>
        <div className="w-full bg-gray-200 rounded-full h-4">
          <div
            className="bg-green-500 h-4 rounded-full transition-all duration-500"
            style={{ width: `${progress}%` }}
          />
        </div>
        <p className="mt-2 text-sm text-gray-700">
          {completed.length} / {plans?.length || 0} ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ({progress}%)
        </p>
        {progress === 100 && (
          <p className="mt-3 text-green-600 font-bold">
            ‚úÖ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶∏‡¶¨ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!
          </p>
        )}

        {/* Task List */}
        <ul className="mt-4 space-y-2">
          {plans?.map((plan) => (
            <li
              key={plan._id || plan.subject}
              className={`p-3 rounded-lg flex justify-between items-center shadow-sm ${
                plan.priority === "High"
                  ? "bg-red-100 border-l-4 border-red-500"
                  : plan.priority === "Medium"
                  ? "bg-yellow-100 border-l-4 border-yellow-500"
                  : "bg-green-100 border-l-4 border-green-500"
              }`}
            >
              <div>
                <h3
                  className={`font-semibold ${
                    completed.includes(plan._id) ? "line-through text-gray-500" : ""
                  }`}
                >
                  {plan.subject}
                </h3>
                <p className="text-sm text-gray-700">
                  Deadline: {plan.deadline}
                </p>
              </div>
              <button
                onClick={() => toggleComplete(plan._id)}
                className={`btn btn-sm ${
                  completed.includes(plan._id) ? "btn-warning" : "btn-success"
                }`}
              >
                {completed.includes(plan._id) ? "Undo" : "Done"}
              </button>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default MotivationalSystem;
